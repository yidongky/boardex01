<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.zerock.mapper.BoardMapper">

	<!-- 게시물 작성 -->
	<insert id="insert" parameterType="org.zerock.domain.BoardVO">
		 insert into
		  tbl_board(title, content, writer)
		   values(#{title}, #{content}, #{writer})
	</insert>
	
	<!-- 게시물 조회 -->
	<select id="read" resultType="org.zerock.domain.BoardVO">
		 select 
		  bno, title, content, writer, regDate, viewCnt, replycnt
		 from 
		  tbl_board
		 where
		  bno = #{bno}
	</select>
	
	<!-- 게시물 수정 -->
	<update id="update">
		 update tbl_board
		  set
		   title = #{title},
		   content = #{content}
		  where bno = #{bno} 
	</update>
	
	<!-- 게시물 삭제 -->
	<delete id="delete">
		delete 
		 from tbl_board
		 where bno = #{bno}
	</delete>

	<!-- 게시물 목록 resultType는 결과를 받을때 --> <!-- <![CDATA[ 문자열 비교연산자나 부등호를 처리할 때 사용태그는  -->
	<select id="listAll" resultType="org.zerock.domain.BoardVO">
	 <![CDATA[
	 select 
	   bno, title, content, writer, regdate, viewcnt 
	 from 
	   tbl_board 
	 where bno > 0 
	 order by bno desc, regdate desc
	 ]]>
	</select>
	
	<!-- 게시물 목록리스트 -->
	<select id="listPage" resultType="org.zerock.domain.BoardVO">
	 <![CDATA[
	 		select
		  		bno, title, content, writer, regDate, viewCnt
		 	from tbl_board
		 	where bno > 0
		 	order by bno DESC LIMIT #{page}, 10	 
	 ]]>
	</select>
		<!-- 게시물 목록리스트 페이징처리 -->
	<select id="listCriteria" resultType="org.zerock.domain.BoardVO">
	<![CDATA[
	 		select
		  		bno, title, content, writer, regDate, viewCnt, replycnt
		 	from tbl_board
		 	where bno > 0
		 	order by bno DESC LIMIT #{pageStart}, #{perPageNum}	 	
	
	]]>
	</select>
	
	<!-- 게시물 총 갯수 -->
	<select id="countPaging" resultType="int">
	<![CDATA[
		select count(bno) from tbl_board
		where bno > 0
	]]>	
	</select>
	
	<!-- 검색하기 -->
	<select id="listSearch" resultType="BoardVO">
	<![CDATA[
		select *
		from tbl_board
		where bno > 0
	]]>
	
	<include refid="search"></include>
		
	<![CDATA[
		order by bno desc
		limit #{pageStart}, #{perPageNum}
	]]>
	</select>
	
	<!-- 검색한 게시글의 총갯수 -->
	<select id="listSearchCount" resultType="int">
	<![CDATA[
		select count(bno) 
		from tbl_board
		where bno > 0
	]]>
	
	<include refid="search"></include>
	
	</select>
	
	<!-- 댓글수 계산하기 -->
	<update id="updateReplyCnt">
		update tbl_board set replycnt = replycnt + #{amount} where bno = #{bno}
	</update>
	
	
	<!-- 조회수 카운트 -->
	<update id="updateViewCnt">
		update tbl_board set viewcnt = viewcnt +1 where bno = #{bno}
	</update>
	
	<!-- 게시글 첨부 파일 업로드  LAST_INSERT_ID():이전에 등록된 번호 BNO 생성 -->
	<insert id="addAttach">
		insert into tbl_attach(fullName, bno) values (#{fullName}, LAST_INSERT_ID())
	</insert>
	
	<!-- 게시글에 첨푸파일 리스트 조회 -->
	<select id="getAttach"  resultType="string">
		select * from tbl_attach where bno = #{bno} order by regdate
	</select>
	
	<!-- 게시글 첨부파일 삭제 -->
	<delete id="deleteAttach">
		delete from tbl_attach where bno = #{bno}
	</delete>
	
	<!-- 게시글 첨부파일 바꾸기 -->
	<insert id="replaceAttach">
		insert into tbl_attach(fullName, bno) values (#{fullName}, #{bno})
	</insert>
	<!-- CONCAT() 함수는 문자열을 하나로 합쳐줘는 역할  -->
	<sql id = "search">
		<if test="searchType != null ">
		
		<if test="searchType == 't'.toString()">
			and title like CONCAT('%', #{keyword}, '%')
		</if>
		<if test="searchType == 'c'.toString()">
			and content like CONCAT('%', #{keyword}, '%')
		</if>
		<if test="searchType == 'w'.toString()">
			and writer like CONCAT('%', #{keyword}, '%')
		</if>
		<if test="searchType == 'tc'.toString()">
			and ( title like CONCAT('%', #{keyword}, '%') OR content like CONCAT('%', #{keyword}, '%'))
		</if>
		<if test="searchType == 'cw'.toString()">
			and (content like CONCAT('%', #{keyword}, '%') OR writer like CONCAT('%', #{keyword}, '%'))
		</if>
		<if test="searchType == 'tcw'.toString()">
			and ( title like CONCAT('%', #{keyword} ,'%') OR content like CONCAT('%', #{keyword}, '%') OR writer like CONCAT('%', #{keyword}, '%') )
		</if>
		
	</if>
	</sql>
	
</mapper>
<!-- OGNL(Object-Graph Navigation Language) -->
<!-- 

choose(when, otherwise)
if와 달리 choose는 여러 상황들 중 하나의 상황에서만 동작합니다.
Java언어의 if~ else 나 JSTL의 <choose>와 유사합니다.
<otherwise>는 모든 조건이 충족되지 않을 경우에 사용합니다.


trim(where, set)
trim,where,set은 단독으로 사용되지 않고 <if>,<choose>와 같은 태그들을 내포하여 SQL들을 연결해 주고
앞 뒤에 필요한 구문들 (AND,OR,WHERE 등)을 추가하거나 생략하는 역할을 합니다.

foreach
List, 배열, Map 등을 이용해서 loop처리를 할 수 있습니다.
주로, IN조건에서 많이 사용합니다.

(경우에 따라 복잡한 WHERE 조건을 만들때에도 사용할 수 있습니다.)

SQL의 조회 조건에는 IN절로 조건을 추가하는 경우가 있습니다.
 -->

